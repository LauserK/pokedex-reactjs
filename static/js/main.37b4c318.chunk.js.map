{"version":3,"sources":["components/card-details/card-details.jsx","components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","components/header/header.jsx","App.js","serviceWorker.js","index.js"],"names":["CardDetails","props","className","details","map","detail","key","Card","alt","pokemon","name","src","toLowerCase","width","height","toUpperCase","type","CardList","pokemons","SearchBox","placeholder","handleChange","onChange","Header","href","target","App","e","setState","searchField","value","state","fetch","then","response","json","data","this","filteredPokemons","filter","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iXAEaA,G,MAAc,SAAAC,GAAK,OAC9B,yBAAKC,UAAU,gBACZD,EAAME,QAAQC,IAAI,SAAAC,GAAM,OACvB,0BAAMC,IAAKD,EAAQH,UAAU,sBAC1BG,QCHIE,G,MAAO,SAAAN,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEM,IAAKP,EAAMQ,QAAQC,KACnBC,IAAG,sFAAiFV,EAAMQ,QAAQC,KAAKE,cAApG,QACHC,MAAM,QACNC,OAAO,UAET,4BAAKb,EAAMQ,QAAQC,KAAKK,eACxB,kBAAC,EAAD,CAAaZ,QAASF,EAAMQ,QAAQO,UCT3BC,G,MAAW,SAAAhB,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMiB,SAASd,IAAI,SAAAK,GAAO,OACzB,kBAAC,EAAD,CAAMH,IAAKG,EAAQC,KAAMD,QAASA,SCL7BU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEnB,UAAU,SACVc,KAAK,SACLI,YAAaA,EACbE,SAAUD,MCLDE,G,MAAS,kBACpB,gCACE,0DAEE,uBAAGC,KAAK,8BAA8BC,OAAO,UAA7C,gBCyCSC,G,kBAvCb,aAAe,IAAD,8BACZ,+CAeFL,aAAe,SAAAM,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEF,OAAOK,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVW,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MACE,+FAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI,EAAKR,SAAS,CAAEV,SAAUkB,Q,+BAOlC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUW,EADX,EACWA,YACZS,EAAmBpB,EAASqB,OAAO,SAAA9B,GAAO,OAC9CA,EAAQC,KAAKE,cAAc4B,SAASX,EAAYjB,iBAElD,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,aAAd,WACA,kBAAC,EAAD,CACEkB,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUH,SAAUoB,S,GAlCVG,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.37b4c318.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card-details.css\";\r\nexport const CardDetails = props => (\r\n  <div className=\"card-details\">\r\n    {props.details.map(detail => (\r\n      <span key={detail} className=\"card-detailts-item\">\r\n        {detail}\r\n      </span>\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { CardDetails } from \"../card-details/card-details\";\r\nimport \"./card.css\";\r\nexport const Card = props => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt={props.pokemon.name}\r\n      src={`http://sebathomson.cl/projects/pokedex-angularjs-platzi/assets/img/pokemons/${props.pokemon.name.toLowerCase()}.jpg`}\r\n      width=\"180px\"\r\n      height=\"180px\"\r\n    />\r\n    <h2>{props.pokemon.name.toUpperCase()}</h2>\r\n    <CardDetails details={props.pokemon.type} />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card\";\r\nimport \"./card-list.css\";\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.pokemons.map(pokemon => (\r\n        <Card key={pokemon.name} pokemon={pokemon} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.css\";\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nexport const Header = () => (\r\n  <header>\r\n    <span>\r\n      Created by Kildare Lauser\r\n      <a href=\"https://twitter.com/LauserK\" target=\"_blank\">\r\n        @LauserK\r\n      </a>\r\n    </span>\r\n  </header>\r\n);\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\nimport { Header } from \"./components/header/header\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://raw.githubusercontent.com/proyectos-mejorandola/pokedex/master/public/pokemons.json\"\n    )\n      .then(response => response.json())\n      .then(data => this.setState({ pokemons: data }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { pokemons, searchField } = this.state;\n    const filteredPokemons = pokemons.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <Header />\n        <h1 className=\"App-title\">Pokedex</h1>\n        <SearchBox\n          placeholder=\"Search pokemons\"\n          handleChange={this.handleChange}\n        />\n        <CardList pokemons={filteredPokemons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}